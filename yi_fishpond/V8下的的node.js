# V8下的的node.js

## 组成
+ 主线程：执行js任务（js中的单线程）
+ IO线程池：执行异步IO

V8内存堆中的javascript对象进行分带管理：新生代和老生代。新生代即存活周期较短的javascript对象，如临时变量、字符串等。老生代则为多次垃圾回收仍然存活，存活周期较长的对象，如服务器对象。

1. scavange算法：通过复制的方式进行内容空间管理，主要用于新生代的内存空间。
2. 标记-清除算法和标记-整理算法：通过标记来对堆内存进行整理和回收，主要用于老生代对象的检测和回收。
3. 对于新生代的回收较老代更加频繁，新生代对象升级为老生代。


## V8 的高效


1. JIT 编译JIT 编译，全称 Just-In-Time 编译，也就是即时编译。它编译出的结果直接是机器语言，而不是字节码。这样大大提高了 V8 在执行 JavaScript 时的效率。不过后来其他的几家 JavaScript引擎也渐渐推出了对 JIT 的支持。
2.  垃圾回收这个特性在 Java 领域中使用得比较多。虽然其他语言或者其他的 JavaScript 引擎实现都有垃圾回收，但是 V8 的垃圾回收借鉴了 Java VM 的精确垃圾回收管理，而其他很多语言的垃圾回收用的是保守垃圾管理。相较而言，V8 的这套垃圾回收机制的效率要远远高于其他一些垃圾回收机制实现——实际上代价就是这种机制的实现难度更大。
3.  内联缓存（Inline Cache）V8 使用了内联缓存的特性来提高属性的访问效率。如有一个访问是 this. 蛋花汤，没有内联缓存的时候，每次要取蛋花汤的话都会对哈希表进行一次寻址，而加入了内联缓存的特性之后，V8 能马上知道这个属性的一个偏移量，而不用再次计算寻址的偏移量了。
4.  隐藏类由于 JavaScript 是一门动态的编程语言，因此哪怕是在 ES6 及以上版本的规范中有了class 的一个定义，开发者也能非常方便地对一个对象添加或者移除一个属性。隐藏类就是对这样一套对象体系中的一个黑科技的包装——所有如属性一样的对象会被归为同一个隐藏类。
